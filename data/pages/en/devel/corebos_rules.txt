====== coreBOS Rules ======

coreBOS Rules are a step towards [[https://en.wikipedia.org/wiki/Business_process_management|BPM]] automation using the workflow infrastructure.

A **rule** is a [[en:adminmanual:businessmappings:condition_query|Condition Query]] or a [[en:adminmanual:businessmappings:condition_expression|Condition Expression]] Business Map that is launched in the context of a CRM record.

In BPM, a rule is defined as a string expression, written in some grammar, that is evaluated using a given context.

Using this definition, in coreBOS, we use either an SQL query or a workflow expression and evaluate it in the context of any record in the application.

This will return a result, whose value depends exclusively on the rule being launched.

Let's see some examples.

Let's suppose we have this Condition Expression map:

<code>
<map>
  <expression>uppercase('this string')</expression>
</map>
</code>

This expression does not depend on any context, it is a fixed value always (rather useless in real life), so we can call it in any context and always get the same result. Let's suppose that the map above is stored in the record 34031 and that we have a valid webservice ID for an account with 11x74, our call would look like this:

<code php>
$result = coreBOS_Rule::evaluate(34031, '11x74');
// $result == 'THIS STRING'
</code>

The profile of the rule would be like this:

<code php>
$result = coreBOS_Rule::evaluate($conditionid, $contextid);
</code>

Now let's suppose we change the expression map above to:

<code>
<map>
  <expression>accountname</expression>
</map>
</code>

When we evaluate this rule against different account contexts we will get different account names.

A condition query could be:

<code>
<map>
<module>Accounts</module>
<sql>select vtiger_account.accountid
from vtiger_account
inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_account.accountid
inner join vtiger_invoice on vtiger_invoice.accountid=vtiger_account.accountid
inner join vtiger_crmentity as crminv on crminv.crmid=vtiger_invoice.invoiceid
where vtiger_crmentity.deleted=0 and crminv.deleted=0 and vtiger_account.accountid=?
 </sql>
<return>count</return>
</map>
</code>

and the rule call would be:

<code php>
$result = coreBOS_Rule::evaluate($conditionid, '11x74');
// $result == the number of invoice of account with crmid 74
</code>

In the end, the goal is to give the developer a tool to make decisions that are defined by the implementor. In this last example above we get the number of invoices any given account has. So we can apply a discount if this number is non-zero, or bigger than 10, for example. Now the implementor can decide to change the SQL and count only paid invoices or invoices in the last 6 months.

Finally, since rules are based on business maps, and these on the existing workflow expression system all enhancements we make in either are directly inherited by the rule system. There is one special case in the condition expression business map that is worth mentioning: function execution.

The [[en:adminmanual:businessmappings:condition_expression|Condition Expression]] Business Map permits the execution of any function that is loaded in the application. So we could also define our own functions to make some complex decision that cannot be made using the workflow expression or an SQL statement and load that into a business map so the implementor would have control over the parameters or, even the actual function. Imagine that we implement 4 or 5 functions to make different decisiones, the implementor could pick which one to use at any given moment by simply editing the business map.

<WRAP center round info 60%>
Insipired by the exceptional work of [[https://hoa-project.net/En/Literature/Hack/Ruler.html|HOA\Ruler]]
</WRAP>

